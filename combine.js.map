{"version":3,"file":"combine.js","sources":["src/lib/diff.ts","src/lib/helpers.ts","src/main.ts","src/combine.ts"],"sourcesContent":["type CompareFn = (a: any, b: any) => boolean\n\nfunction isDifferent(a: any, b: any): boolean {\n  if (!a && !b) return typeof a === typeof b\n  if (a === b) return false\n  if ((!a && b) || (a && !b)) return true\n  if (typeof a !== typeof b) return true\n  if (Array.isArray(a)) return compareArray(a, b, isDifferent)\n  if (typeof a === 'object') return compareObj(a, b, isDifferent)\n  if (!a && !b) return typeof a === typeof b\n  return true\n}\n\nfunction compareArray(\n  a: Array<any>,\n  b: Array<any>,\n  compareFn: CompareFn\n): boolean {\n  if (!Array.isArray(b)) return true\n  if (a.length !== b.length) return true\n  if (a.length === 0 && b.length === 0) return false\n  return a.filter((item, idx) => compareFn(item, b[idx])).length !== 0\n}\n\nfunction compareObj(a: object, b: object, compareFn: CompareFn): boolean {\n  const aKeys = Object.keys(a)\n  const bKeys = Object.keys(b)\n  if (aKeys.length !== bKeys.length) return true\n\n  return aKeys.filter(\n      (key, idx) => (key === bKeys[idx] ? compareFn(a[key], b[key]) : true)\n    ).length !== 0\n  \n}\n\nexport { isDifferent }\n","import { ParsedAction } from './../types'\nimport {\n  Dispatch,\n  SetState,\n  GetState,\n  Actions,\n  ParsedActions,\n  Action,\n  State\n} from '../types'\n\nconst mapObj = (r: object, fn: (v: Action) => ParsedAction): ParsedActions => {\n  const o: ParsedActions = {}\n  for (let v in r) o[v] = fn(r[v])\n  return o\n}\nconst createActions = (\n  actions: Actions,\n  getState: GetState,\n  dispatch: Dispatch,\n  setState: SetState\n): ParsedActions => {\n  const returnFn = (fn: Action) => (...args: Array<any>): void => {\n    return setState(fn(getState(), dispatch)(...args))\n  }\n  return mapObj(actions, returnFn)\n}\n\nexport { mapObj, createActions }\n","import { isDifferent } from './lib/diff'\nimport { createActions } from './lib/helpers'\n\nimport {\n  State,\n  Action,\n  Actions,\n  Connection,\n  Consumer,\n  Dispose,\n  ParsedAction,\n  ParsedActions,\n  MapStateToProps,\n  MapActionsToProps\n} from './types.d'\n\n\n\nfunction Store(initialState: State = {}, initialActions: Actions = {}) {\n  let connections: Array<Connection> = []\n  let state: State = initialState\n  let actions: ParsedActions = createActions(\n    initialActions,\n    getState,\n    dispatch,\n    setState\n  )\n\n  function emit(): void { connections.forEach(con => con(state, actions)) }\n  function setState(newState: State): void {\n    if (newState !== undefined && isDifferent(state, newState)) {\n      state = newState\n      emit()\n    }\n  }\n\n  function dispatch(name: string, ...args: Array<any>): void {\n    if (typeof actions[name] === 'function') actions[name](...args)\n  }\n\n  function dispose(connection: Connection): void {\n    connections = connections.filter(c => c !== connection)\n  }\n\n  function getState(mapStateToProps?: MapStateToProps) {\n    return mapStateToProps ? mapStateToProps(state) : state\n  }\n\n  function getActions(mapActionsToProps?: MapActionsToProps) {\n    return mapActionsToProps ? mapActionsToProps(actions) : actions\n  }\n  this.__INITIAL_ACTIONS__ = initialActions\n  this.actions = actions\n  this.getState = getState\n  this.setState = setState\n  this.getActions = getActions\n  this.connect = (\n    mapStateToProps: MapStateToProps = null,\n    mapActionsToProps: MapActionsToProps = null,\n    force: boolean = false\n  ) => {\n    let prevState = getState(mapStateToProps)\n    return (consumer: Consumer): Dispose => {\n      const connection = (state: State, actions: ParsedActions): void => {\n        const currentState = getState(mapStateToProps)\n        if (force || isDifferent(prevState, currentState)) {\n          prevState = currentState\n          consumer(currentState, getActions(mapActionsToProps))\n        }\n      }\n      consumer(prevState, getActions(mapActionsToProps))\n\n      connections.push(connection)\n      return {\n        dispose: () => { dispose(connection) }\n      }\n    }\n  }\n\n}\n\nexport { Store }\n","import { Store } from './main'\nimport { isDifferent } from './lib/diff'\n\nimport {\n  State,\n  Action,\n  Actions,\n  Connection,\n  Consumer,\n  Dispose,\n  ParsedAction,\n  ParsedActions,\n  MapStateToProps,\n  MapActionsToProps\n} from './types.d'\n\n\nconst store = new Store()\n\nfunction combineStores(stores) {\n  const storeNames = Object.keys(stores)\n  const stateObj = {}\n  const actionObj = {}\n  storeNames.forEach(storeName => {\n    if (stores[storeName] instanceof Store) {\n      stateObj[storeName] = stores[storeName].getState()\n      actionObj[storeName] = stores[storeName].__INITIAL_ACTIONS__\n    }\n    // warn if in development\n  })\n  return new createCombinedStore(stateObj, { ...actionObj })\n}\n\nfunction createCombinedStore(initialState, initialActions) {\n  let connections: Array<Connection> = []\n  let state = initialState\n  let actions: ParsedActions = createNestedActions(\n    initialActions,\n    getState,\n    dispatch,\n    setState\n  )\n\n  function emit(state, actions): void {\n    connections.forEach(con => {\n      con(state, actions)\n    })\n  }\n  function setState(newState: State): void {\n    if (newState !== undefined && isDifferent(state, newState)) {\n      state = newState\n      emit(getState(), actions)\n    }\n  }\n\n  function dispatch(name: string, ...args: Array<any>): void {\n    if (name.indexOf('/')) {\n      const split = name.split('.')\n      if (typeof actions[split[0]][split[1]] === 'function') {\n        actions[split[0]][split[1]](...args)\n      }\n    }\n    if (typeof actions[name] === 'function') actions[name](...args)\n  }\n\n  function dispose(connection: Connection): void {\n    connections = connections.filter(c => c !== connection)\n  }\n\n  function getState(mapStateToProps?: MapStateToProps) {\n    return mapStateToProps ? mapStateToProps(state) : state\n  }\n\n  function getActions(mapActionsToProps?: MapActionsToProps) {\n    return mapActionsToProps ? mapActionsToProps(actions) : actions\n  }\n\n  this.actions = actions\n  this.getState = getState\n  this.getActions = getActions\n  this.setState = setState\n  this.connect = (\n    mapStateToProps: MapStateToProps = null,\n    mapActionsToProps: MapActionsToProps = null,\n    force: boolean = false\n  ) => {\n    let prevState = mapStateToProps ? mapStateToProps(state) : state\n    return (consumer: Consumer): Dispose => {\n      const connection = (state: State, actions: ParsedActions): void => {\n        const currentState = getState(mapStateToProps)\n\n        if (force || isDifferent(prevState, currentState)) {\n          prevState = currentState\n          consumer(currentState, getActions(mapActionsToProps))\n        }\n      }\n      connections.push(connection)\n      return {\n        dispose: () => { dispose(connection) }\n      }\n    }\n  }\n\n}\n\nconst mapObj = (stateKey, root, transformFn) => {\n  const o = {}\n  for (let key in root) o[key] = transformFn(stateKey, root[key])\n  return o\n}\n\nconst createNestedActions = (actions, getState, dispatch, setState) => {\n  const transformFn = (stateKey, action) => {\n    return (...args) => {\n      const currentState = getState()\n      setState({\n        ...currentState,\n        [stateKey]: {\n          ...action(currentState[stateKey], getState, getState)(...args)\n        }\n      })\n    }\n  }\n\n  const rtnObj = {}\n  for (let key in actions) {\n    rtnObj[key] = mapObj(key, actions[key], transformFn)\n  }\n  return rtnObj\n}\n\nexport { combineStores }"],"names":["a","b","Array","isArray","compareFn","length","filter","item","idx","compareArray","isDifferent","aKeys","Object","keys","bKeys","key","compareObj","createActions","actions","getState","dispatch","setState","r","fn","o","v","mapObj","_i","args","initialState","initialActions","connections","state","name","newState","undefined","forEach","con","mapStateToProps","mapActionsToProps","this","__INITIAL_ACTIONS__","getActions","connect","force","prevState","consumer","connection","currentState","push","dispose","c","Store","stateKey","root","transformFn","createNestedActions","action","rtnObj","stores","stateObj","actionObj","storeName","indexOf","split","_a","emit"],"mappings":"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"}